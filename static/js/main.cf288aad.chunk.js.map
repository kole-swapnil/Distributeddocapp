{"version":3,"sources":["Components/HomeComponent.js","getWeb3.js","Components/HeaderComponent.js","Components/DoctorComponent.js","Components/PatientComponent.js","Components/FooterComponent.js","Components/TreatmentComponent.js","Components/AllDocsComponent.js","Components/AllTreatment.js","Components/getPatientComponent.js","Components/SharedComponent.js","Components/MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["addr","getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","Header","props","state","isNavOpen","togglenav","bind","this","setState","Fragment","Navbar","dark","expand","className","NavbarToggler","onClick","NavbarBrand","Collapse","isOpen","navbar","Nav","NavItem","to","Component","handleInputChange","event","target","value","name","Home","y","auth","preventDefault","authhandler","accounts","Form","onSubmit","FormGroup","row","Label","htmlFor","md","Col","Input","type","id","onChange","size","Button","color","DoctorComp","age","speciality","handleSubmit","JSON","stringify","contract","methods","calldoctor","send","from","gas","placeholder","offset","PatientComp","pataccount","allergies","weight","height","gender","bloodtype","location","callpatient","res","Footer","style","bottom","TreatmentComp","symptoms","medications","treatcount","procedure","description","prescription","treatId","patstate","docaccount","handleSubmitadd","handleSubmitmod","handleSubmitsenddoc","addTreatment","treatmentCount","call","setDoc","patientstate","dotreatment","resi","alldocs","Alldocsrender","dish","yz","zyq","docadd","Card","CardBody","CardTitle","CardText","AllDocsComponent","docCount","doccount","response","i","docsId","rex","push","j","length","docs","xt","z","Menu","map","x","key","Allpatrender","day","moment","unix","dateofComp","xy","time","Date","format","treatment_id","doctor_add","patient_add","AllTreatmentComponent","treat","filter","resp","GetPatient","patient_state","treatmentsgone","pat","gettreatgone","mst","arr","ms","concat","st","Iframe","dangerouslySetInnerHTML","__html","iframe","SharedComp","Main","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","MedicoContract","networks","instance","Contract","abi","address","alert","error","vt","storageValue","exact","path","component","AllTreatment","App","basename","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cf288aad.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback } from 'reactstrap';\r\nimport { BrowserRouter, NavLink, Link } from 'react-router-dom';\r\nimport '../App.css';\r\n\r\nlet addr;\r\nfunction handleInputChange(event){\r\n    const target = event.target;\r\n    addr = target.value;\r\n    const name = target.name;\r\n};\r\n\r\n\r\n\r\nfunction Home(props){\r\n    var y = props.auth;\r\n    async function handleSubmit(event){\r\n        event.preventDefault();  \r\n        if(addr == ''){\r\n            props.authhandler(false);\r\n        }\r\n        if(props.accounts[0] == addr){\r\n            props.authhandler(true);\r\n            addr = '';\r\n        }\r\n        \r\n        \r\n        console.log(addr);\r\n        \r\n    }\r\n    \r\n    return(\r\n        <div className=\"container\">\r\n     \r\n        <i className=\"fa fa-user-md fa-5x\"></i>\r\n        \r\n       \r\n           <h2>Welcome to Distributed Doc</h2>\r\n      \r\n             <br/>\r\n             <br/>        \r\n            <h2>Login/Logout</h2>\r\n            <Form onSubmit={handleSubmit}>\r\n                        <FormGroup row className={y?\"invisible\":\"\"}>\r\n                            <Label htmlFor=\"acx\" md={2}>Passphrase</Label>\r\n                            <Col md={10}>\r\n                                <Input type=\"password\" id=\"acx\" name=\"acx\"  onChange={handleInputChange}/>\r\n                            </Col>\r\n                        </FormGroup>\r\n                        <FormGroup row>\r\n                            <Col md={{size:12}}>\r\n                                <Button type=\"submit\" color=\"primary\">\r\n                                    {y?\"LOGOUT\":\"LOGIN\"}\r\n                                </Button>\r\n                            </Col>\r\n                        </FormGroup>\r\n                    </Form>\r\n            \r\n   </div>\r\n    )\r\n}\r\n\r\nexport default Home;","import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Acccounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from 'react';\r\nimport { Navbar, NavbarBrand, Jumbotron, Nav, NavbarToggler, Collapse, NavItem } from 'reactstrap';\r\nimport { BrowserRouter, NavLink } from 'react-router-dom';\r\n \r\nimport '../App.css'\r\n\r\nclass Header extends Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = { isNavOpen : false }\r\n        this.togglenav = this.togglenav.bind(this);\r\n    }\r\n\r\n    togglenav(){\r\n        this.setState({isNavOpen : !this.state.isNavOpen});\r\n    }\r\n\r\n    render(){\r\n    \r\n        return(\r\n            <React.Fragment>\r\n                <Navbar dark expand=\"md\">\r\n                    <div className=\"container\">\r\n                        <NavbarToggler onClick={this.togglenav}/>\r\n                        <NavbarBrand className=\"mr-auto\" >DAPP EMR</NavbarBrand>\r\n                        <Collapse isOpen = {this.state.isNavOpen} navbar>\r\n                            <Nav navbar>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/home\">Home</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/doctor\">Register</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/treatment\">Treatment</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/docs\">Doctors</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/patient\">Patient</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/treat\">All Treatment</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink className=\"nav-link\" to=\"/patdata\">Patient Data</NavLink>\r\n                            </NavItem>\r\n                           \r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n            \r\n            </React.Fragment>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback } from 'reactstrap';\r\nimport { BrowserRouter, NavLink } from 'react-router-dom';\r\nimport '../App.css';\r\nimport { render } from 'react-dom';\r\n\r\nclass DoctorComp extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={name : '', age : 0, speciality : ''};\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    \r\n    }\r\n\r\n  //  contract = this.props.contract;\r\n  //  accounts = this.props.accounts; \r\n    \r\n    handleInputChange(event){\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n    \r\n    async handleSubmit(event){\r\n        console.log(\"Current State\" + JSON.stringify(this.state));\r\n        event.preventDefault();\r\n        \r\n        const req = await this.props.contract.methods.calldoctor(this.state.age,this.state.name,this.state.speciality).send({from: this.props.accounts[0],gas : 1000000});\r\n        \r\n        // console.log(res);\r\n        \r\n    }\r\n\r\n    render(){\r\n       \r\n        return(\r\n            <div className=\"container\">\r\n                \r\n                    <h2>Register Doctor</h2>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"name\" md={2}>Doctor Name</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Name\" value={this.state.name} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"age\" md={2}>Age</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"tel\" id=\"age\" name=\"age\" placeholder=\"Age\" value={this.state.age} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"speciality\" md={2}>Specilaity</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"speciality\" name=\"speciality\" placeholder=\"Speciality\" value={this.state.speciality} onChange={this.handleInputChange} />    \r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size:10, offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\" >\r\n                                        Add Doctor\r\n                                    </Button>\r\n                                </Col>\r\n                                \r\n                            </FormGroup>\r\n                        </Form>\r\n                     \r\n                </div>\r\n       \r\n        )\r\n        }        \r\n}\r\n\r\nexport default DoctorComp;","import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\r\nimport { BrowserRouter, NavLink } from 'react-router-dom';\r\nimport '../App.css';\r\nimport { render } from 'react-dom';\r\n\r\nclass PatientComp extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={pataccount : '',\r\n                    allergies : '', \r\n                    weight : '', \r\n                    height : '', \r\n                    gender : '', \r\n                    bloodtype : '',\r\n                    age : '',\r\n                    location : ''\r\n\r\n                };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    \r\n    }\r\n    \r\n    handleInputChange(event){\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n\r\n    async handleSubmit(event){\r\n        console.log(\"Current State\" + JSON.stringify(this.state));\r\n        event.preventDefault();\r\n        const res = await this.props.contract.methods.callpatient(this.state.pataccount,this.state.allergies,this.state.weight,this.state.height,this.state.gender,this.state.age,this.state.bloodtype,this.state.location).send({from: this.props.accounts[0],gas : 1000000});\r\n        console.log(res);\r\n    \r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"container\">\r\n                \r\n                    <h2>Add Patient</h2>\r\n                \r\n                <Form onSubmit={this.handleSubmit}>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"pataccount\" md={2}>Patient Account</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"pataccount\" name=\"pataccount\" placeholder=\"Patient Account Address\" value={this.state.pataccount} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"allergies\" md={2}>Allergies</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"allergies\" name=\"allergies\" placeholder=\"Allergies\" value={this.state.allergies} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"weight\" md={2}>Weight</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"weight\" name=\"weight\" placeholder=\"Weight\" value={this.state.weight} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"height\" md={2}>Height</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"tel\" id=\"height\" name=\"height\" placeholder=\"Height\" value={this.state.height} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"gender\" md={2}>Gender</Label>\r\n                                <Col md={4}>\r\n                                    <Input type=\"select\" name=\"gender\" value={this.state.gender} onChange={this.handleInputChange}>\r\n                                    <option>Choose</option>\r\n                                    <option>Male</option>\r\n                                    <option>Female</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"bloodtype\" md={2}>Blood Type</Label>\r\n                                <Col md={4}>\r\n                                    <Input type=\"select\" name=\"bloodtype\" value={this.state.bloodtype} onChange={this.handleInputChange}>\r\n                                    <option>Choose</option>\r\n                                    <option>A</option>\r\n                                    <option>B</option>\r\n                                    <option>AB</option>\r\n                                    <option>O</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"age\" md={2}>Age</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"tel\" id=\"age\" name=\"age\" placeholder=\"Age\" value={this.state.age} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"location\" md={2}>Location</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"location\" name=\"location\" placeholder=\"Location\" value={this.state.location} onChange={this.handleInputChange} />    \r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size:10, offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Add Patient\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                </div>\r\n       \r\n        )\r\n        }        \r\n}\r\n\r\nexport default PatientComp;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Footer(props){\r\n    return(\r\n        <div className=\"footer\">\r\n        <div className=\"container\" style={{bottom:0}}>\r\n            \r\n            <div className=\"row justify-content-center\">             \r\n                <div className=\"col-auto\">\r\n                    <p>© Copyright @2020 Atiya Abdalwahab</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback } from 'reactstrap';\r\nimport { BrowserRouter, NavLink } from 'react-router-dom';\r\nimport '../App.css';\r\nimport { render } from 'react-dom';\r\n\r\nclass TreatmentComp extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={pataccount : '', \r\n                    symptoms : '', \r\n                    medications : '',\r\n                    treatcount : 0,\r\n                    procedure : '',\r\n                    description : '',\r\n                    prescription : '',\r\n                    treatId : 0,\r\n                    patstate : 'Active',\r\n                    docaccount : ''\r\n                };\r\n        this.handleSubmitadd = this.handleSubmitadd.bind(this);\r\n        this.handleSubmitmod = this.handleSubmitmod.bind(this);\r\n        this.handleSubmitsenddoc = this.handleSubmitsenddoc.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n    \r\n    }\r\n    \r\n    handleInputChange(event){\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n\r\n    async handleSubmitadd(event){\r\n        console.log(\"Current State\" + JSON.stringify(this.state));\r\n        event.preventDefault();\r\n        const res = await this.props.contract.methods.addTreatment(this.state.pataccount,this.state.symptoms,this.state.medications).send({from: this.props.accounts[0],gas : 1000000});\r\n         const treatcount = await this.props.contract.methods.treatmentCount().call();\r\n        this.setState({\r\n             treatcount : treatcount\r\n         })\r\n         console.log(this.state.treatcount);\r\n\r\n        \r\n    }\r\n    async handleSubmitsenddoc(event){\r\n        event.preventDefault();\r\n     \r\n\r\n        const res = await this.props.contract.methods.setDoc(this.state.treatId,this.state.docaccount).send({from: this.props.accounts[0],gas : 1000000});\r\n        console.log(res);\r\n        }\r\n\r\n    async handleSubmitmod(event){\r\n        event.preventDefault();\r\n        var patientstate = 0;\r\n        if(this.state.patstate == 'Recovered'){\r\n            patientstate = 1;\r\n        }\r\n        else if(this.state.patstate == 'Deceased'){\r\n            patientstate = 2;\r\n        }\r\n        console.log(\"Current State\" + JSON.stringify(this.state));\r\n        let resi = await this.props.contract.methods.dotreatment(this.state.treatId,this.state.procedure,this.state.description,this.state.prescription,patientstate).send({from: this.props.accounts[0],gas : 1000000});\r\n        console.log(resi);\r\n    }\r\n\r\n    render(){\r\n        \r\n        return(\r\n            <div className=\"container\">\r\n                \r\n                    <h2>Add Treatment</h2>\r\n                \r\n                <Form onSubmit={this.handleSubmitadd}>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"pataccount\" md={2}>Patient Account</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"pataccount\" name=\"pataccount\" placeholder=\"Patient Account Address\" value={this.state.pataccount} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"symptoms\" md={2}>Symptoms</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"symptoms\" name=\"symptoms\" placeholder=\"Symptoms\" value={this.state.symptoms} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"medications\" md={2}>Medications</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"medications\" name=\"medications\" placeholder=\"Medications\" value={this.state.medications} onChange={this.handleInputChange} />    \r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size:8}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Add Treatment\r\n                                    </Button>\r\n                                </Col>\r\n                                <Col md={{size:2}}>\r\n                                <Button color=\"success\">{this.state.treatcount}</Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n\r\n                            \r\n                        </Form>\r\n                        <br/>\r\n                        <br/>\r\n                        <h2>Do Treatment</h2>\r\n                        <Form onSubmit={this.handleSubmitmod}>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"treatId\" md={2}>Treatment Id</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"tel\" id=\"treatId\" name=\"treatId\" placeholder=\"Treatment Id\" value={this.state.treatId} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"patstate\" md={2}>Patient State</Label>\r\n                                <Col md={4}>\r\n                                    <Input type=\"select\" name=\"patstate\" value={this.state.patstate} onChange={this.handleInputChange}>\r\n                                    <option>Choose</option>\r\n                                    <option>Active</option>\r\n                                    <option>Recovered</option>\r\n                                    <option>Deceased</option>\r\n                                    </Input>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            \r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"procedure\" md={2}>Procedure</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"procedure\" name=\"procedure\" placeholder=\"Procedure\" value={this.state.procedure} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"description\" md={2}>Description</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"description\" name=\"description\" placeholder=\"Description\" value={this.state.description} onChange={this.handleInputChange} />    \r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"prescription\" md={2}>Prescription</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"prescription\" name=\"prescription\" placeholder=\"Prescription\" value={this.state.prescription} onChange={this.handleInputChange} />    \r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size:10, offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Do Treatment\r\n                                    </Button>\r\n                                </Col>\r\n                            </FormGroup>\r\n                        </Form>\r\n                        <br/>\r\n                        <br/>\r\n                        <h2>Send Treatment</h2>\r\n                        <Form onSubmit={this.handleSubmitsenddoc}>\r\n                        <FormGroup row>\r\n                                <Label htmlFor=\"treatId\" md={2}>Treatment Id</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"tel\" id=\"treatId\" name=\"treatId\" placeholder=\"Treatment Id\" value={this.state.treatId} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Label htmlFor=\"docaccount\" md={2}>Doctor Account</Label>\r\n                                <Col md={10}>\r\n                                    <Input type=\"text\" id=\"docaccount\" name=\"docaccount\" placeholder=\"Doctor Account Address\" value={this.state.docaccount} onChange={this.handleInputChange}/>\r\n                                </Col>\r\n                            </FormGroup>\r\n                            <FormGroup row>\r\n                                <Col md={{size:10, offset:2}}>\r\n                                    <Button type=\"submit\" color=\"primary\">\r\n                                        Send Treatment\r\n                                    </Button>\r\n                                </Col>\r\n                                \r\n                            </FormGroup>\r\n\r\n                            \r\n                        </Form>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                        <br/>\r\n                </div>\r\n       \r\n        )\r\n        }        \r\n}\r\n\r\nexport default TreatmentComp;","import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback ,Card, CardImg,CardImgOverlay, CardTitle, CardBody, CardText} from 'reactstrap';\r\nimport { BrowserRouter, NavLink } from 'react-router-dom';\r\n\r\nimport { render } from 'react-dom';\r\nvar mst;\r\nvar alldocs = [];\r\nfunction Alldocsrender({dish,zyq}){\r\n    var yz = zyq[0] == dish.docadd?\"bg-success text-white\":\"\"; \r\n    return(\r\n        <Card className={yz}>\r\n        <i className=\"fa fa-user-md fa-5x\"></i>\r\n        <CardBody>\r\n        <CardTitle>Name : {dish.name}</CardTitle>\r\n        <CardText><small>Account : {dish.docadd}</small></CardText>\r\n          <CardText>\r\n            <small>Speciality : {dish.speciality}</small>\r\n          </CardText>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n    }\r\n\r\nclass AllDocsComponent extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { docCount : 0, dish: [] }\r\n        //this.com = this.com.bind(this);\r\n    }\r\n    \r\n    async componentDidMount(){\r\n        var res = await this.props.contract?.methods.doccount().call();\r\n               \r\n                var response= [];\r\n                for(var i=1;i<=res;i++){\r\n                    var rex = await this.props.contract?.methods.docsId(i).call();\r\n                    response.push(rex);\r\n                }\r\n                console.log(response);\r\n                alldocs = [];\r\n                for(var j=0;j<response.length;j++){\r\n                    var xt = await this.props.contract.methods.docs(response[j]).call();\r\n                    alldocs.push(xt);\r\n                    console.log(j);\r\n                }\r\n                console.log(alldocs);\r\n                this.setState({ dish : alldocs});\r\n         \r\n    }\r\n\r\n     render(){\r\n         var z = this.props.accounts;\r\n        \r\n        const Menu = this.state.dish.map((x) => {\r\n            return (\r\n                <div key={x.docadd} className=\"col-4 col-md-3\">\r\n                    < Alldocsrender dish={x} zyq={z}/>\r\n                </div>\r\n            );\r\n        })\r\n        \r\n        return(\r\n        <div className=\"container\">\r\n            <h2>All Doctors</h2>\r\n            <div className=\"row\">\r\n                {Menu}\r\n            </div>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            \r\n        </div>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default AllDocsComponent;","import React, { Component } from 'react';\r\nimport moment from 'moment';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback ,Card, CardImg,CardImgOverlay, CardTitle, CardBody, CardText} from 'reactstrap';\r\nimport { BrowserRouter, NavLink } from 'react-router-dom';\r\n\r\nimport { render } from 'react-dom';\r\nvar mst;\r\nvar alldocs = [];\r\nfunction Allpatrender({dish}){\r\n    var day = moment.unix(dish.dateofComp); \r\n    var xy = dish.dateofComp;\r\n    var date = new Date(xy*1000);\r\n    var time = day.format('dddd MMMM Do YYYY, h:mm:ss a');\r\n    var yz = xy != 0?\"bg-success text-white\":\"\"; \r\n    return(\r\n        <Card className={yz}>\r\n        <i className=\"fa fa-medkit fa-5x\"></i>\r\n        <CardBody>\r\n        <CardTitle>Treatment ID : {dish.treatment_id}</CardTitle>\r\n        <CardText><small>Doctor account : {dish.doctor_add}</small></CardText>\r\n        <CardText><small>Patient account : {dish.patient_add}</small></CardText>\r\n        <CardText><small>Symptoms : {dish.symptoms}</small></CardText>\r\n        <CardText><small>Medications : {dish.medications}</small></CardText>\r\n        <CardText><small>Description : {dish.description}</small></CardText>\r\n        <CardText><small>Prescription : {dish.prescription}</small></CardText>\r\n          <CardText>\r\n            <small >Time completed : {xy == 0?\"Treatment not completed\":time}</small>\r\n          </CardText>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n    }\r\n\r\nclass AllTreatmentComponent extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = { docCount : 0, dish: [] }\r\n        //this.com = this.com.bind(this);\r\n    }\r\n    \r\n    async componentDidMount(){\r\n        var res = await this.props.contract?.methods.treatmentCount().call();\r\n               \r\n                var response= [];\r\n                for(var i=1;i<=res;i++){\r\n                    var rex = await this.props.contract?.methods.treat(i).call();\r\n                    response.push(rex);\r\n                }\r\n                alldocs = [];\r\n                alldocs = response.filter((resp) => resp.doctor_add == this.props.accounts[0])\r\n                console.log(response);\r\n                this.setState({ dish : alldocs});\r\n         \r\n    }\r\n\r\n     render(){\r\n  \r\n        const Menu = this.state.dish.map((x) => {\r\n            return (\r\n                <div key={x} className=\"col-4 col-md-3\">\r\n                    < Allpatrender dish={x}/>\r\n                </div>\r\n            );\r\n        })\r\n        \r\n        return(\r\n        <div className=\"container\">\r\n            <h2>All Treatment</h2>\r\n            <div className=\"row\">\r\n                {Menu}\r\n            </div>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n        </div>\r\n        \r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default AllTreatmentComponent;","import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback ,Card, CardImg,CardImgOverlay, CardTitle, CardBody, CardText} from 'reactstrap';\r\nimport { BrowserRouter, NavLink } from 'react-router-dom';\r\nimport '../App.css';\r\nimport { render } from 'react-dom';\r\n\r\nclass GetPatient extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            pataccount: '',\r\n            allergies: '',\r\n            weight: '',\r\n            height: '',\r\n            gender: '',\r\n            bloodtype: '',\r\n            age: '',\r\n            location: '',\r\n            patient_state: '',\r\n            treatmentsgone: '',\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n\r\n    }\r\n\r\n    //  contract = this.props.contract;\r\n    //  accounts = this.props.accounts; \r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    }\r\n\r\n    async handleSubmit(event) {\r\n        console.log(\"Current State\" + JSON.stringify(this.state));\r\n        event.preventDefault();\r\n        const res = await this.props.contract.methods.pat(this.state.pataccount).call();\r\n        var mst = await this.props.contract.methods.gettreatgone(this.state.pataccount).call();\r\n        var arr = '';\r\n        mst.map(ms => {\r\n            arr = arr.concat(ms,',')\r\n        })\r\n\r\n        console.log(\"fdsaf\",arr);\r\n        this.setState({\r\n            allergies: res.allergies,\r\n            weight: res.weight,\r\n            height: res.height,\r\n            gender: res.gender,\r\n            bloodtype: res.bloodtype,\r\n            age: res.age,\r\n            location: res.location,\r\n            patient_state: res.patient_state,\r\n            treatmentsgone: arr\r\n\r\n        });\r\n        console.log(\"Current State\" + JSON.stringify(this.state));\r\n        // console.log(res);\r\n\r\n    }\r\n\r\n    render() {\r\n        var st = '';\r\n        if(this.state.patient_state == 0){\r\n            st = 'Active';\r\n        }\r\n        else if(this.state.patient_state == 1){\r\n            st = 'Recovered';\r\n        }\r\n        else if(this.state.patient_state == 2){\r\n            st = 'Deceased';\r\n        }\r\n        \r\n        return (\r\n            <div className=\"container\">\r\n\r\n                <h2>Patient Details</h2>\r\n                <Form onSubmit={this.handleSubmit}>\r\n                    <FormGroup row>\r\n                        <Label htmlFor=\"pataccount\" md={2}>Patient Account</Label>\r\n                        <Col md={10}>\r\n                            <Input type=\"text\" id=\"pataccount\" name=\"pataccount\" placeholder=\"Patient Account Address\" value={this.state.pataccount} onChange={this.handleInputChange} />\r\n                        </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row>\r\n                        <Col md={{ size: 12}}>\r\n                            <Button type=\"submit\" color=\"primary\">\r\n                                Get Data\r\n                                    </Button>\r\n                        </Col>\r\n                    </FormGroup>\r\n                </Form>\r\n                <br />\r\n                <br />\r\n                <h2>Patient Details</h2>\r\n                <Card >\r\n                    <i className=\"fa fa-wheelchair fa-3x\"></i>\r\n                    <CardBody>\r\n                        <CardTitle>Patient account : {this.state.pataccount}</CardTitle>\r\n                        <CardText><small>Height : {this.state.height}</small></CardText>\r\n                        <CardText><small>Weight : {this.state.weight}</small></CardText>\r\n                        <CardText><small>Bloodtype : {this.state.bloodtype}</small></CardText>\r\n                        <CardText><small>Gender : {this.state.gender}</small></CardText>\r\n                        <CardText><small>Allergies : {this.state.allergies}</small></CardText>\r\n                        <CardText><small>Location : {this.state.location}</small></CardText>\r\n                        <CardText><small >State : {st}</small></CardText>\r\n                        <CardText><small >treatments Undergone : {this.state.treatmentsgone}</small></CardText>\r\n                    </CardBody>\r\n                </Card>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                <br/>\r\n                \r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default GetPatient;","import Frame from 'react-frame-component';\r\nimport React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback } from 'reactstrap';\r\nimport { BrowserRouter, NavLink } from 'react-router-dom';\r\nimport '../App.css';\r\nimport { render } from 'react-dom';\r\nconst iframe = '<iframe height=\"600\" style=\"width: 100%;\" scrolling=\"yes\" title=\"fx.\" src=\"http://localhost:3000/\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\"></iframe>'; \r\n\r\n\r\nfunction Iframe(props) {\r\n    return (<div dangerouslySetInnerHTML={ {__html:  props.iframe?props.iframe:\"\"}} />);\r\n  }\r\n\r\nfunction SharedComp() {\r\n  return (\r\n    <div className=\"App\">\r\n  \r\n      <Iframe iframe={iframe} />,\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\nexport default SharedComp;","import React, { Component } from \"react\";\r\nimport MedicoContract from \"../contracts/Medico.json\";\r\nimport getWeb3 from \"../getWeb3\";\r\nimport \"../App.css\";\r\nimport Header from \"./HeaderComponent\";\r\nimport Home from './HomeComponent';\r\nimport { Switch, Route, Redirect, Link } from 'react-router-dom';\r\nimport DoctorComp from \"./DoctorComponent\";\r\nimport PatientComp from \"./PatientComponent\";\r\nimport Footer from './FooterComponent';\r\nimport TreatmentComp from \"./TreatmentComponent\";\r\nimport AllDocsComponent from \"./AllDocsComponent\";\r\nimport AllTreatmentComponent from \"./AllTreatment\";\r\nimport GetPatient from \"./getPatientComponent\";\r\nimport SharedComp from \"./SharedComponent\";\r\n\r\n//import HDWalletProvider from \"@truffle/hdwallet-provider\";\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { storageValue: 0, web3: null, accounts: null, contract: null ,res : null,auth:false};\r\n    this.authhandler = this.authhandler.bind(this);\r\n  }\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      const deployedNetwork = MedicoContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        MedicoContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n     \r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      console.log(instance)\r\n      this.setState({ web3, accounts, contract: instance });\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  authhandler = (vt) => {\r\n    this.setState({auth : vt });\r\n  }\r\n\r\n  render() {\r\n    const Homepage = () => {\r\n      return(\r\n        <Home auth={this.state.auth} authhandler={this.authhandler} accounts={this.state.accounts}/>\r\n      )\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <Header auth={this.state.auth} />\r\n\r\n        <Switch>\r\n          <Route exact path='/' component={Homepage} />\r\n          <Route path='/doctor' component={() => <DoctorComp contract={this.state.contract} accounts={this.state.accounts } auth={this.state.auth}/>} />\r\n          <Route path='/treatment' component={() => <TreatmentComp contract={this.state.contract} accounts={this.state.accounts} auth={this.state.auth}/>}/>\r\n          <Route path='/docs' component={() => <AllDocsComponent contract={this.state.contract} accounts={this.state.accounts} auth={this.state.auth}/>}/>\r\n          <Route path='/patient' component={() => <PatientComp contract={this.state.contract} accounts={this.state.accounts} auth={this.state.auth}/>} />\r\n          <Route path='/treat' component={() => <AllTreatmentComponent contract={this.state.contract} accounts={this.state.accounts} auth={this.state.auth}/>}/>\r\n          <Route path='/patdata' component={() => <GetPatient contract={this.state.contract} accounts={this.state.accounts} auth={this.state.auth}/>}/>\r\n          <Route path='/shared' component={() => <SharedComp contract={this.state.contract} accounts={this.state.accounts} auth={this.state.auth}/>}/>\r\n          <Redirect to=\"/\"/>\r\n        </Switch>\r\n        <Footer/>\r\n      </div>\r\n    )\r\n\r\n\r\n\r\n  }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from \"react\";\r\nimport Main from './Components/MainComponent';\r\nimport {HashRouter,BrowserRouter} from 'react-router-dom';\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <HashRouter basename=\"/\">\r\n      <div className=\"App\">\r\n        <Main />\r\n      </div>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'font-awesome/css/font-awesome.min.css';\n\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n  \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}